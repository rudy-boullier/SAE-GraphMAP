/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package iut.sae.graphmap;

import iut.sae.graphmap.models.Edge;
import iut.sae.graphmap.models.Node;

/**
 *
 * @author Jonathan MONTMAIN <jmontmain at gmail.com>
 */
public class CompareDialog extends javax.swing.JDialog {
    
    /**
     * Represents the first city to compare
     */
    private final Node firstCity;
    
    /**
     * Represents the second city to compare
     */
    private final Node secondCity;

    /**
     * Creates new form CompareDialog
     * @param parent Parent of the dialog
     * @param firstCity First city to compare
     * @param secondCity Second city to compare
     */
    public CompareDialog(java.awt.Frame parent, Node firstCity, Node secondCity) {
        super(parent, true);
        this.firstCity = firstCity;
        this.secondCity = secondCity;
        initComponents();
        initStates();
    }
    
    /**
     * Shows the dialog
     * @param parent Parent of the dialog
     * @param firstCity First city to compare
     * @param secondCity Second city to compare
     */
    public static void showDialog(java.awt.Frame parent, Node firstCity, Node secondCity) {
        CompareDialog window = new CompareDialog(parent, firstCity, secondCity);
        window.setTitle("Comparaison de " + firstCity.getName() + " et de " + secondCity.getName());
        window.setVisible(true);
    }
    
    private int getCityIndex(Node city, Node.NodeType type) {
        int total = 0;
        for (Edge firstLevelEdge : city.getEdges()) {
            Node firstDest = Node.findNode(firstLevelEdge.getLeftNode()) == city ? Node.findNode(firstLevelEdge.getRightNode()) : Node.findNode(firstLevelEdge.getLeftNode());
            if (firstDest.getType() == type) total++;
            for (Edge secondLevelEdge : firstDest.getEdges()) {
                Node secondDest = Node.findNode(secondLevelEdge.getLeftNode()) == firstDest ? Node.findNode(secondLevelEdge.getRightNode()) : Node.findNode(secondLevelEdge.getLeftNode());
                if (secondDest != city && secondDest.getType() == type) total++;
            }
        }
        return total;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openedCityLabel = new javax.swing.JLabel();
        foodCityLabel = new javax.swing.JLabel();
        culturalCityLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        openedCityLabel.setText("jLabel3");

        foodCityLabel.setText("jLabel4");

        culturalCityLabel.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(foodCityLabel)
                    .addComponent(culturalCityLabel)
                    .addComponent(openedCityLabel))
                .addContainerGap(346, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openedCityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(foodCityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(culturalCityLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initStates() {
        if (getCityIndex(firstCity, Node.NodeType.V) > getCityIndex(secondCity, Node.NodeType.V)) {
            openedCityLabel.setText(firstCity.getName() + " est plus ouverte que " + secondCity.getName());
        } else if (getCityIndex(firstCity, Node.NodeType.V) < getCityIndex(secondCity, Node.NodeType.V)) {
            openedCityLabel.setText(firstCity.getName() + " est moins ouverte que " + secondCity.getName());
        } else {
            openedCityLabel.setText(firstCity.getName() + " est autant ouverte que " + secondCity.getName());
        }
        if (getCityIndex(firstCity, Node.NodeType.R) > getCityIndex(secondCity, Node.NodeType.R)) {
            foodCityLabel.setText(firstCity.getName() + " est plus gastronomique que " + secondCity.getName());
        } else if (getCityIndex(firstCity, Node.NodeType.R) < getCityIndex(secondCity, Node.NodeType.R)) {
            foodCityLabel.setText(firstCity.getName() + " est moins gastronomique que " + secondCity.getName());
        } else {
            foodCityLabel.setText(firstCity.getName() + " est autant gastronomique que " + secondCity.getName());
        }
        if (getCityIndex(firstCity, Node.NodeType.L) > getCityIndex(secondCity, Node.NodeType.L)) {
            culturalCityLabel.setText(firstCity.getName() + " est plus culturelle que " + secondCity.getName());
        } else if (getCityIndex(firstCity, Node.NodeType.L) < getCityIndex(secondCity, Node.NodeType.L)) {
            culturalCityLabel.setText(firstCity.getName() + " est moins culturelle que " + secondCity.getName());
        } else {
            culturalCityLabel.setText(firstCity.getName() + " est autant culturelle que " + secondCity.getName());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel culturalCityLabel;
    private javax.swing.JLabel foodCityLabel;
    private javax.swing.JLabel openedCityLabel;
    // End of variables declaration//GEN-END:variables
}
