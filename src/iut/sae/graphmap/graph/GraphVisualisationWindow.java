package iut.sae.graphmap.graph;

import iut.sae.graphmap.CompareDialog;
import iut.sae.graphmap.DistanceDialog;
import iut.sae.graphmap.FileSelectionDialog;
import iut.sae.graphmap.models.Node;
import iut.sae.graphmap.models.Path;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.graphstream.graph.Graph;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swing_viewer.SwingViewer;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.util.InteractiveElement;

/**
 * Represents the main window of the Program
 * @author Jonathan MONTMAIN <jmontmain at gmail.com>
 */
public class GraphVisualisationWindow extends javax.swing.JFrame {
    
    /**
     * Represents the shown graph
     */
    private Graph graph;
    
    /**
     * Represents the panel that shows the graph
     */
    private Component viewComponent;
    
    /**
     * Represents the selected node
     */
    private Node selectedNode;

    /**
     * Creates new form GraphVisualisationWindow
     */
    public GraphVisualisationWindow() {
        initComponents();
    }
    
    /**
     * Shows the window and open the FileSelectionDialog
     */
    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        if (b) openFileSelectionDialog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightPanel = new javax.swing.JPanel();
        nodeTitle = new javax.swing.JLabel();
        distancePanel = new javax.swing.JPanel();
        distanceOptionsPanel = new javax.swing.JPanel();
        maxDistanceLabel = new javax.swing.JLabel();
        maxDistanceSpinner = new javax.swing.JSpinner();
        visualizeButton = new javax.swing.JButton();
        comparePanel = new javax.swing.JPanel();
        firstCityComboBox = new javax.swing.JComboBox<>();
        secondCityComboBox = new javax.swing.JComboBox<>();
        firstCityLabel = new javax.swing.JLabel();
        secondCityLabel = new javax.swing.JLabel();
        compareButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        displayMenu = new javax.swing.JMenu();
        displayNodesTitlesCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        displayEdgesCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GraphMap");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        rightPanel.setMinimumSize(new java.awt.Dimension(300, 300));
        rightPanel.setPreferredSize(new java.awt.Dimension(300, 274));

        nodeTitle.setText("Aucun noeud sélectionné");

        distancePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Plus court chemin"));

        distanceOptionsPanel.setLayout(new java.awt.GridLayout(1, 2, 10, 10));

        maxDistanceLabel.setText("Distance maximale");
        distanceOptionsPanel.add(maxDistanceLabel);

        maxDistanceSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        distanceOptionsPanel.add(maxDistanceSpinner);

        visualizeButton.setText("Visualiser");
        visualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout distancePanelLayout = new javax.swing.GroupLayout(distancePanel);
        distancePanel.setLayout(distancePanelLayout);
        distancePanelLayout.setHorizontalGroup(
            distancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, distancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(distancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(distanceOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(distancePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(visualizeButton)))
                .addContainerGap())
        );
        distancePanelLayout.setVerticalGroup(
            distancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distancePanelLayout.createSequentialGroup()
                .addComponent(distanceOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualizeButton)
                .addContainerGap())
        );

        comparePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Comparaison"));

        firstCityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));

        secondCityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));

        firstCityLabel.setText("Ville 1");

        secondCityLabel.setText("Ville 2");

        compareButton.setText("Comparer");
        compareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout comparePanelLayout = new javax.swing.GroupLayout(comparePanel);
        comparePanel.setLayout(comparePanelLayout);
        comparePanelLayout.setHorizontalGroup(
            comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createSequentialGroup()
                        .addComponent(firstCityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(firstCityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createSequentialGroup()
                        .addComponent(secondCityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(secondCityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comparePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(compareButton)))
                .addContainerGap())
        );
        comparePanelLayout.setVerticalGroup(
            comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(firstCityComboBox)
                    .addComponent(firstCityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(comparePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(secondCityComboBox)
                    .addComponent(secondCityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(compareButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(distancePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addComponent(nodeTitle)
                        .addGap(0, 127, Short.MAX_VALUE))
                    .addComponent(comparePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nodeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comparePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        setGroupEnabled(rightPanel, false);

        getContentPane().add(rightPanel, java.awt.BorderLayout.LINE_END);

        fileMenu.setText("Fichier");

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openFileMenuItem.setText("Ouvrir...");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);
        fileMenu.add(separator1);

        exitMenuItem.setText("Quitter");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        displayMenu.setText("Affichage");
        displayMenu.setToolTipText("");
        displayMenu.setEnabled(false);

        displayNodesTitlesCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        displayNodesTitlesCheckBoxMenuItem.setSelected(true);
        displayNodesTitlesCheckBoxMenuItem.setText("Afficher les titres des noeuds");
        displayNodesTitlesCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayNodesTitlesCheckBoxMenuItemActionPerformed(evt);
            }
        });
        displayMenu.add(displayNodesTitlesCheckBoxMenuItem);

        displayEdgesCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        displayEdgesCheckBoxMenuItem.setSelected(true);
        displayEdgesCheckBoxMenuItem.setText("Afficher les liaisons");
        displayEdgesCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayEdgesCheckBoxMenuItemActionPerformed(evt);
            }
        });
        displayMenu.add(displayEdgesCheckBoxMenuItem);

        menuBar.add(displayMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Enables a container as well as its children
     * @param parent Parent container
     * @param b Enabled state
     */
    private void setGroupEnabled(Container parent, boolean b) {
        parent.setEnabled(b);
        for (Component component : parent.getComponents()) {
            component.setEnabled(b);
            if (component instanceof Container) {
                setGroupEnabled((Container) component, b);
            }
        }
    }
    
    /**
     * Shows the FileSelectionDialog
     */
    private void openFileSelectionDialog() {
        File file = FileSelectionDialog.showDialog(this, graph != null);
        
        if (file != null) {
            graph = new SingleGraph(file.getName());
            graph.setAttribute("ui.quality");
            graph.setAttribute("ui.antialias");
            graph.setAttribute("ui.stylesheet", GraphStyles.getFullStyles());
            try {
                GraphParser.parse(file, graph);
            } catch(IOException ex) {
                JOptionPane.showMessageDialog(this, "Le fichier: \"" + file.getAbsolutePath() + "\" n'a pas pu être lu !", "Erreur lors de l'ouverture du fichier", JOptionPane.ERROR_MESSAGE);
            }
            Viewer viewer = new SwingViewer(graph, SwingViewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
            viewer.enableAutoLayout();
            View view = viewer.addDefaultView(false);
            view.enableMouseOptions();
            ((Component) view).addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent evt) {
                    int x = evt.getX();
                    int y = evt.getY();
                    org.graphstream.graph.Node node = (org.graphstream.graph.Node) view.findGraphicElementAt(EnumSet.of(InteractiveElement.NODE), x, y);
                    if (node != null) {
                        selectedNode = Node.findNode(node.toString());
                        nodeTitle.setText((selectedNode != null) ? "Selection: " + selectedNode.getName() : "Aucun noeud sélectionné");
                        setGroupEnabled(distancePanel, selectedNode != null);
                    } else {
                        selectedNode = null;
                        nodeTitle.setText("Aucun noeud sélectionné");
                        setGroupEnabled(distancePanel, false);
                    }
                }
            });
            if (viewComponent != null) this.remove(viewComponent);
            viewComponent = (Component) view;
            this.add(viewComponent, BorderLayout.CENTER);
            setGroupEnabled(rightPanel, true);
            setGroupEnabled(displayMenu, true);
            setGroupEnabled(distancePanel, false);
            this.firstCityComboBox.setModel(new CityComboBoxModel(Node.getRegisteredNodes()));
            this.secondCityComboBox.setModel(new CityComboBoxModel(Node.getRegisteredNodes()));
            this.validate();
            this.repaint();
        }
    }
    
    /**
     * Handles click on "Open file"
     * @param evt 
     */
    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        openFileSelectionDialog();
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    /**
     * Handles click on "Exit"
     * @param evt 
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Handles click on "Visualize"
     * @param evt 
     */
    private void visualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeButtonActionPerformed
        List<Path> paths = new ArrayList<>();
        for (Node node : Node.getRegisteredNodes()) {
            if (node == selectedNode) continue;
            paths.add(Path.findShortestPath(this.graph, selectedNode, node));
        }
        DistanceDialog.showDialog(this, selectedNode, paths, (int) maxDistanceSpinner.getValue());
    }//GEN-LAST:event_visualizeButtonActionPerformed

    /**
     * Handles click on "Display nodes titles"
     * @param evt 
     */
    private void displayNodesTitlesCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayNodesTitlesCheckBoxMenuItemActionPerformed
        graph.setAttribute("ui.stylesheet", GraphStyles.toggleNodesTitles(displayNodesTitlesCheckBoxMenuItem.isSelected()));
    }//GEN-LAST:event_displayNodesTitlesCheckBoxMenuItemActionPerformed

    /**
     * Handles click on "Display edges"
     * @param evt 
     */
    private void displayEdgesCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayEdgesCheckBoxMenuItemActionPerformed
        graph.setAttribute("ui.stylesheet", GraphStyles.toggleEdgesVisibility(displayEdgesCheckBoxMenuItem.isSelected()));
    }//GEN-LAST:event_displayEdgesCheckBoxMenuItemActionPerformed

    /**
     * Handles click on "Compare"
     * @param evt 
     */
    private void compareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareButtonActionPerformed
        if (firstCityComboBox.getSelectedIndex() >= 0 && secondCityComboBox.getSelectedIndex() >= 0)
            CompareDialog.showDialog(this, Node.getRegisteredNodes().get(firstCityComboBox.getSelectedIndex()), Node.getRegisteredNodes().get(secondCityComboBox.getSelectedIndex()));
    }//GEN-LAST:event_compareButtonActionPerformed

    private class CityComboBoxModel extends DefaultComboBoxModel {
        
        private final List<Node> nodes;
        
        public CityComboBoxModel(List<Node> nodes) {
            this.nodes = nodes;
        }
        
        @Override
        public int getSize() {
            return nodes.size();
        }
        
        @Override
        public String getElementAt(int index) {
            return this.nodes.get(index).getName();
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compareButton;
    private javax.swing.JPanel comparePanel;
    private javax.swing.JCheckBoxMenuItem displayEdgesCheckBoxMenuItem;
    private javax.swing.JMenu displayMenu;
    private javax.swing.JCheckBoxMenuItem displayNodesTitlesCheckBoxMenuItem;
    private javax.swing.JPanel distanceOptionsPanel;
    private javax.swing.JPanel distancePanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> firstCityComboBox;
    private javax.swing.JLabel firstCityLabel;
    private javax.swing.JLabel maxDistanceLabel;
    private javax.swing.JSpinner maxDistanceSpinner;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nodeTitle;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JComboBox<String> secondCityComboBox;
    private javax.swing.JLabel secondCityLabel;
    private javax.swing.JPopupMenu.Separator separator1;
    private javax.swing.JButton visualizeButton;
    // End of variables declaration//GEN-END:variables
}
