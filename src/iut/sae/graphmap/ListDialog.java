/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package iut.sae.graphmap;

import iut.sae.graphmap.models.Edge;
import iut.sae.graphmap.models.Node;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.AbstractTableModel;

/**
 * Represents the list of all the Nodes and Edges dialog
 * @author Jonathan MONTMAIN, Rudy BOULLIER
 */
public class ListDialog extends javax.swing.JDialog {

    /**
     * Creates new form ListDialog
     * @param parent Parent of the dialog
     */
    public ListDialog(java.awt.Frame parent) {
        super(parent, false);
        this.setTitle("Liste des noeuds et liaisons");
        initComponents();
    }

    /**
     * Shows the dialog
     * @param parent Parent of the dialog
     */
    public static void showDialog(java.awt.Frame parent) {
        ListDialog dialog = new ListDialog(parent);
        dialog.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeComboBox = new javax.swing.JComboBox<>();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Villes", "Loisirs", "Restaurants", "Nationales", "Départementales", "Autoroutes" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(typeComboBox, java.awt.BorderLayout.PAGE_START);

        table.setModel(new ListTableModel());
        tableScrollPane.setViewportView(table);

        getContentPane().add(tableScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles new value selection on the combo box
     * @param evt Action Event
     */
    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        ((ListTableModel) this.table.getModel()).update();
    }//GEN-LAST:event_typeComboBoxActionPerformed

    /**
     * Represents the Model that handles the list of all the Nodes and Edges
     */
    public class ListTableModel extends AbstractTableModel {
        
        // Names of the columns
        private String[] columnsNames;
        
        // List of Nodes or Edges
        private final List<Object> objects;
        
        /**
         * Instanciates the model
         */
        public ListTableModel() {
            this.objects = new ArrayList<>();
            this.update();
        }
        
        /**
         * Updates the table structure and data according to a new type
         */
        public final void update() {
            String type = (String) ListDialog.this.typeComboBox.getSelectedItem();
            this.objects.clear();
            switch (type) {
                case "Villes":
                case "Loisirs":
                case "Restaurants":
                    this.columnsNames = new String[]{"Nom"};
                    for (Node node : Node.getRegisteredNodes()) {
                        if (node.getType() == Node.NodeType.V && type.equals("Villes")) {
                            this.objects.add(node);
                        } else if (node.getType() == Node.NodeType.L && type.equals("Loisirs")) {
                            this.objects.add(node);
                        } else if (node.getType() == Node.NodeType.R && type.equals("Restaurants")) {
                            this.objects.add(node);
                        }
                    }
                    break;
                case "Nationales":
                case "Départementales":
                case "Autoroutes":
                    this.columnsNames = new String[]{"Noeud 1", "Noeud 2", "Longueur"};
                    for (Edge edge : Edge.getRegisteredEdges()) {
                        if (edge.getType() == Edge.EdgeType.N && type.equals("Nationales")) {
                            this.objects.add(edge);
                        } else if (edge.getType() == Edge.EdgeType.D && type.equals("Départementales")) {
                            this.objects.add(edge);
                        } else if (edge.getType() == Edge.EdgeType.A && type.equals("Autoroutes")) {
                            this.objects.add(edge);
                        }
                    }
                    break;
            }
            this.fireTableStructureChanged();
            this.fireTableDataChanged();
        }

        /**
         * Returns the number of rows
         * @return Number of rows
         */
        @Override
        public int getRowCount() {
            return this.objects.size();
        }

        /**
         * Returns the number of columns
         * @return Number of columns
         */
        @Override
        public int getColumnCount() {
            return this.columnsNames.length;
        }

        /**
         * Returns the name of a given column
         * @param column Column index
         * @return Name of the given column
         */
        @Override
        public String getColumnName(int column) {
            return this.columnsNames[column];
        }              

        /**
         * Returns the value at a given column and given row
         * @param rowIndex Row index
         * @param colIndex Column index
         * @return Value at the given column and given row
         */
        @Override
        public Object getValueAt(int rowIndex, int colIndex) {
            Object object = this.objects.get(rowIndex);
            
            switch (colIndex) {
                case 0:
                    if (object instanceof Node) {
                        return ((Node) object).getName();
                    } else if (object instanceof Edge) {
                        return ((Edge) object).getLeftNode();
                    }
                    return null;
                case 1:
                    if (object instanceof Edge) {
                        return ((Edge) object).getRightNode();
                    }
                    return null;
                case 2:
                    if (object instanceof Edge) {
                        return ((Edge) object).getLength();
                    }
                    return null;
                default:
                    return null;
            }
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JComboBox<String> typeComboBox;
    // End of variables declaration//GEN-END:variables
}
